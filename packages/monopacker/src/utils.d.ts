import * as execa from 'execa';
import * as _rimraf from 'rimraf';
import * as fs from 'fs-extra';
import * as matcher from 'matcher';
import { DependenciesLike, LernaPackageList, IAnalytics } from './types';
export declare function findDuplicatesInArray<T extends string[] | number[]>(array: T): any[];
export declare function rimraf(pathName: string, options?: _rimraf.Options): Promise<void>;
export declare function copyDir(source: string, destination: string, opts?: {
    dereference?: boolean;
    filter?: (filename: string) => boolean;
}): Promise<void>;
export declare function getLernaPackages2(cwd: string): Promise<LernaPackageList>;
export declare function asyncForEach<T extends any = any>(array: T[], callback: (entry: T, index: number) => Promise<any>): Promise<void>;
export declare function extractDependencies(dependencyLike?: Record<string, string>, filter?: (dep: string) => boolean): DependenciesLike;
export declare function readJSON<T extends object = {}>(f: string): Promise<T>;
export declare function getLernaPackages(root: string): import("./types").ILernaPackageListEntry[];
export declare function countMsg(countable: Record<string, string> | any[], singular: string, plural?: string): string;
export declare function displayPath(base: string, toDisplay: string): string;
export declare function createHash(value: string): string;
export declare function createIntegrityHash(version: string, analytics: IAnalytics): string;
export declare const pkg: any;
export { fs, matcher, execa };
